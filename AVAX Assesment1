// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract RequireAssertRevertExample {
    address public owner;
    uint256 public value;

    constructor() {
        owner = msg.sender;
        value = 0;
    }

    // Function to update the value, only accessible by the contract owner
    function updateValue(uint newValue) public {
        require(msg.sender == owner, "Only the owner can update the value");
        value = newValue;
    }
    
    
    // Function to demonstrate the usage of assert()
    function assertExample(uint256 a, uint256 b) public pure returns (uint256) {
        // Assert will check for internal errors, such as overflows or underflows
        // If the condition in the assert statement evaluates to false, the transaction will be reverted.
        assert(a + b >= a); // Making sure that the addition doesn't overflow.
        return a + b;
    }

    // Function to demonstrate the usage of revert()
    function revertExample() public pure {
        // Revert can be used to revert the transaction with custom error messages
        revert("This transaction is intentionally reverted");
    }
}

